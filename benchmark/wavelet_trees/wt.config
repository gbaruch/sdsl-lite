# This file specifies wavelettrees that are used in the benchmark.
#
# Each index is specified by a triple: WT_ID;SDSL_TYPE;WT_LATEX_NAME
# * WT_ID        : An identifier for the index. Only letters and underscores are allowed in ID.
# * SDSL_TYPE    : Corresponding sdsl type.
# * WT_LATEX_NAME: LaTeX name for output in the benchmark report.

# Different Shapes and Bit-Vectors (Byte-Alphabet):

#HUFF_b_v_no_select;wt_huff<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUFF-v-no-select
#HUFF_b_v5_no_select;wt_huff<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUFF-v5-no-select
#HUFF_b_il_no_select;wt_huff<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>;WT-HUFF-il-no-select
#SKEL_b_v;wt_new_sk<cann_shape,bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>; WT-SKEL-v
#SKEL_b_v5;wt_new_sk<cann_shape,bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>; WT-SKEL-v5
#SKEL_b_il;wt_new_sk<cann_shape,bit_vector_il<512>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>; WT-SKEL-il
#RED_SKEL_v;wt_red_sk<cann_shape, bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-RED-SKEL-v
#RED_SKEL_v5;wt_red_sk<cann_shape, bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-RED-SKEL-v5
#RED_SKEL_il;wt_red_sk<cann_shape, bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>;WT-RED-SKEL-il

#KUL_riceH;KulekciRiceH<bit_vector, select_support_mcl<1,1>>;KUL-riceH
#KUL_riceH-rrr;KulekciRiceH<rrr_vector<63>, select_support_rrr<1,63>>;KUL-riceH-rrr
#KUL_riceH-sd;KulekciRiceH<sd_vector<>, sd_vector<>::select_1_type>;KUL-riceH-sd
#KUL_eliasH;KulekciEliasH<bit_vector, select_support_mcl<1,1>>;KUL-eliasH
#KUL_eliasH-rrr;KulekciEliasH<rrr_vector<63>, select_support_rrr<1,63>>;KUL-eliasH-rrr
#KUL_eliasH-sd;KulekciEliasH<sd_vector<>, sd_vector<>::select_1_type>;KUL-eliasH-sd
#KUL_riceW;KulekciRiceW<wt_huff_int<bit_vector>>;KUL-riceW
#KUL_riceW-rrr;KulekciRiceW<wt_huff_int<rrr_vector<63>>>;KUL-riceW-rrr
#KUL_riceW-sd;KulekciRiceW<wt_huff_int<sd_vector<>>>;KUL-riceW-sd
KUL_eliasW;KulekciEliasW<wt_huff_int<bit_vector>>;KUL-eliasW
#KUL_eliasW-rrr;KulekciEliasW<wt_huff_int<rrr_vector<63>>>;KUL-eliasW-rrr
#KUL_eliasW-sd;KulekciEliasW<wt_huff_int<sd_vector<>>>;KUL-eliasW-sd


#HUTU_b_v;wt_hutu<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUTU-v
#HUTU_b_v5;wt_hutu<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUTU-v5
#HUTU_b_il;wt_hutu<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>;WT-HUTU-il

#BLCD_v;wt_blcd<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-BLCD-v
#BLCD_v5;wt_blcd<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-BLCD-v5
#BLCD_il;wt_blcd<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>;WT-BLCD-il
#BLCD_RRR15;wt_blcd<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type, byte_tree<>>;WT-BLCD-RRR15
#BLCD_RRR63;wt_blcd<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type, byte_tree<>>;WT-BLCD-RRR63
#HUTU_RRR15;wt_hutu<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type, byte_tree<>>;WT-HUTU-RRR15
#HUTU_RRR63;wt_hutu<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type, byte_tree<>>;WT-HUTU-RRR63
#HUFF_RRR15;wt_huff<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type, byte_tree<>>;WT-HUFF-RRR15
#HUFF_RRR63;wt_huff<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type, byte_tree<>>;WT-HUFF-RRR63
#RLMN_v;wt_rlmn<bit_vector, rank_support_v<>, select_support_mcl<1>, wt_huff<>>;WT-RLMN-v
#RLMN_v5;wt_rlmn<bit_vector, rank_support_v5<>, select_support_mcl<1>, wt_huff<>>;WT-RLMN-v5
#RLMN_il;wt_rlmn<bit_vector_il<>, rank_support_il<>, select_support_il<1>, wt_huff<>>;WT-RLMN-il
#RLMN_RRR15;wt_rlmn<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, wt_huff<>>;WT-RLMN-RRR15
#RLMN_RRR63;wt_rlmn<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, wt_huff<>>;WT-RLMN-RRR63
#RLMN_SD;wt_rlmn<sd_vector<>, sd_vector<>::rank_1_type, sd_vector<>::select_1_type, wt_huff<>>;WT-RLMN-SD

# Different Shapes and Bit-Vectors (Int-Alphabet):

#HUFF_v;wt_huff<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUFF-v
#HUFF_v5;wt_huff<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUFF-v5
#HUFF_il;wt_huff<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<>>;WT-HUFF-il

#WT_INT_v;wt_int<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>>;WT-INT-v
#WT_INT_v5;wt_int<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>>;WT-INT-v5
#WT_INT_il;wt_int<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>>;WT-INT-il


#HUTU_v;wt_hutu<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUTU-v
#HUTU_v5;wt_hutu<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUTU-v5
#HUTU_il;wt_hutu<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<>>;WT-HUTU-il

#SKEL_rrr;wt_new_sk<cann_shape, rrr_vector<63>, rank_support_rrr<1, 63>, select_support_rrr<1, 63>, select_support_rrr<1, 63>, int_tree<false, uint32_t>>;WT-SKEL-rrr
#SKEL_v;wt_new_sk<cann_shape, bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<false, uint32_t>>;WT-SKEL-v
#SKEL_v5;wt_new_sk<cann_shape, bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<false, uint32_t>>;WT-SKEL-v5
#SKEL_il;wt_new_sk<cann_shape, bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<false, uint32_t>>;WT-SKEL-il

#RED_SKEL_rrr;wt_red_sk<cann_shape, rrr_vector<63>, rank_support_rrr<1, 63>, select_support_rrr<1, 63>, select_support_rrr<1, 63>, int_tree<false, uint32_t>>;WT-RED--rrr
#RED_SKEL_v;wt_red_sk<cann_shape, bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<false, uint32_t>>;WT-RED-SKEL-v
#RED_SKEL_v5;wt_red_sk<cann_shape, bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<false, uint32_t>>;WT-RED-SKEL-v5
#RED_SKEL_il;wt_red_sk<cann_shape, bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<false, uint32_t>>;WT-RED-SKEL-il

#WM_INT_rrr;wm_int<rrr_vector<63>, rank_support_rrr<1, 63>, select_support_rrr<1, 63>, select_support_rrr<1, 63>>;WM-rrr
#WM_INT_v_no_select;wm_int<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>>;WM-v-no-select
#WM_INT_v5_no_select;wm_int<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>>;WM-v5-no-select
#WM_INT_il_no_select;wm_int<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>>;WM-il-no-select

#FIXED;wt_fixedLength<>;FIXED
#ENC_fib;wt_fixedLength<enc_vector<coder::fibonacci>>;ENC-fib
#ENC_gamma;wt_fixedLength<enc_vector<coder::elias_gamma>>;ENC-gamma
#ENC_delta;wt_fixedLength<enc_vector<coder::elias_delta>>;ENC-delta
#VLC_fib;wt_fixedLength<vlc_vector<coder::fibonacci>>;VLC-fib
#VLC_gamma;wt_fixedLength<vlc_vector<coder::elias_gamma>>;VLC-gamma
#VLC_delta;wt_fixedLength<vlc_vector<coder::elias_delta>>;VLC-delta
#DAC2_v;wt_fixedLength<dac_vector<2, rank_support_v<>>>;DAC2-v
#DAC2_v5;wt_fixedLength<dac_vector<2, rank_support_v5<>>>;DAC2-v5
#DAC4_v;wt_fixedLength<dac_vector<4, rank_support_v<>>>;DAC4-v
#DAC4_v5;wt_fixedLength<dac_vector<4, rank_support_v5<>>>;DAC4-v5
#DAC8_v;wt_fixedLength<dac_vector<8, rank_support_v<>>>;DAC8-v
#DAC8_v5;wt_fixedLength<dac_vector<8, rank_support_v5<>>>;DAC8-v5
#DAC16_v;wt_fixedLength<dac_vector<8, rank_support_v<>>>;DAC16-v
#DAC16_v5;wt_fixedLength<dac_vector<8, rank_support_v5<>>>;DAC16-v5


#WT_HUFF_INT;wt_huff<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0> , int_tree<>>;TW-int-HUFF
#WT_INT_RRR15;wt_int<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type>;WT-INT-RRR15
#WT_INT_RRR63;wt_int<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type>;WT-INT-RRR63
#BLCD_v;wt_blcd<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-BLCD-v
#BLCD_v5;wt_blcd<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-BLCD-v5
#BLCD_il;wt_blcd<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<>>;WT-BLCD-il
#BLCD_RRR15;wt_blcd<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type, int_tree<>>;WT-BLCD-RRR15
#BLCD_RRR63;wt_blcd<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type, int_tree<>>;WT-BLCD-RRR63



#HUTU_RRR15;wt_hutu<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type, int_tree<>>;WT-HUTU-RRR15
#HUTU_RRR63;wt_hutu<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type, int_tree<>>;WT-HUTU-RRR63
#HUFF_RRR15;wt_huff<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type, int_tree<>>;WT-HUFF-RRR15
#HUFF_RRR63;wt_huff<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type, int_tree<>>;WT-HUFF-RRR63

#WM_INT_RRR15;wm_int<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, #rrr_vector<15>::select_0_type>;WM-INT-RRR15
#WM_INT_RRR63;wm_int<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, #rrr_vector<63>::select_0_type>;WM-INT-RRR63
#RLMN_v_INT;wt_rlmn<bit_vector, rank_support_v<>, select_support_mcl<1>, wt_int<>>;INT-WT-RLMN-v
#RLMN_v5_INT;wt_rlmn<bit_vector, rank_support_v5<>, select_support_mcl<1>, wt_int<>>;INT-WT-RLMN-v5
#RLMN_il_INT;wt_rlmn<bit_vector_il<>, rank_support_il<>, select_support_il<1>, wt_int<>>;INT-WT-RLMN-il
#RLMN_RRR15_INT;wt_rlmn<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, wt_int<>>;INT-WT-RLMN-RRR15
#RLMN_RRR63_INT;wt_rlmn<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, wt_int<>>;INT-WT-RLMN-RRR63
#RLMN_SD_INT;wt_rlmn<sd_vector<>, sd_vector<>::rank_1_type, sd_vector<>::select_1_type, wt_int<>>;INT-WT-RLMN-SD
#WT_GMR_RS_IV;wt_gmr_rs<int_vector<>, bit_vector, select_support_mcl<1>, select_support_mcl<0>>;WT-GMR-RS-IV
#WT_GMR_RS_ED128;wt_gmr_rs<enc_vector<coder::elias_delta,128>, bit_vector, select_support_mcl<1>, select_support_mcl<0>>;WT-GMR-RS-ED128
#WT_GMR_IV_IPS32;wt_gmr<int_vector<>, inv_multi_perm_support<32, int_vector<> >  >;WT-GMR-IV-IPS32
#WT_GMR_ED128_IPS32;wt_gmr< enc_vector<coder::elias_delta,128>, inv_multi_perm_support<32,enc_vector<coder::elias_delta,128> >  >;WT-GMR-ED128-IPS32
